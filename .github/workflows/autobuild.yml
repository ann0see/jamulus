#### Automatically build and upload releases to GitHub ####

on:
  push:
    tags:
      - "r*"
#      - latest
#    branches:
#      - "*"
#      - master         # could be restricted to master, if all branches take too much build time
name:                               Publish Release
jobs:

  ## Creates the releases on GitHub ##
  create_release:
     name:                          Create release
     runs-on:                       ubuntu-latest
     outputs:
        upload_url:                 ${{ steps.create_release_step.outputs.upload_url }}
        version:                   ${{ steps.jamulus-build-vars.outputs.JAMULUS_VERSION }}
        version_name:               ${{ steps.jamulus-build-vars.outputs.RELEASE_VERSION_NAME }}

     steps:
         # Checkout code
         - name:                    Checkout code
           uses:                    actions/checkout@v2

         # Set variables
         # Determine releas / pre-release
         - name:                    Get Jamulus build info
           run:                     sh ${{ github.workspace }}/.github/actions_scripts/get_release_vars.sh ${{ github.workspace }}
           id:                      jamulus-build-vars

         # remove tag "latest" from that release
         - name:                    Remove release, if existing (for latest and branches)
           continue-on-error:       true
           uses:                    dev-drprasad/delete-tag-and-release@v0.1.2
           with:
             delete_release:        false
             tag_name:              ${{ steps.jamulus-build-vars.outputs.RELEASE_TAG }}
           env:
             GITHUB_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
             
         # create release (empty, filled by next job)
         - name:                    'Create Release ${{steps.jamulus-build-vars.outputs.RELEASE_TAG}}  {{steps.jamulus-build-vars.outputs.RELEASE_TITLE}}'
           id:                      create_release_step
           uses:                    actions/create-release@v1
           env:
             GITHUB_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
           with:
             tag_name:              ${{ steps.jamulus-build-vars.outputs.RELEASE_TAG }}
             release_name:          ${{ steps.jamulus-build-vars.outputs.RELEASE_TITLE }}
             body_path:             ${{ github.workspace }}/autoLatestChangelog.md
             prerelease:            ${{ steps.jamulus-build-vars.outputs.IS_PRERELEASE }}
             draft:                 false


         ### CANCEL ### can be used for development concerning release-creation
         #- name:                    Cancelthrougherroe
         #  run:                     myundefinedfunction

  ## Builds and uploads the binaries ##
  release_assets:
    name:                           Release assets for ${{ matrix.config.config_name }}
    needs:                          create_release
    runs-on:                        ${{ matrix.config.building_on_os }}
    strategy:
      fail-fast:                    false
      matrix: # Think of this like a foreach loop. Basically runs the steps with every combination of the contents of this. More info: https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
        config:
           - config_name:           Linux (normal)
             target_os:             linux
             building_on_os:        ubuntu-18.04
             build_command:         sh linux/autorelease_linux.sh ${{ github.workspace }}
             asset_path:            deploy/Jamulus_amd64.deb
             asset_name:            jamulus_${{ needs.create_release.outputs.version_name }}_ubuntu_amd64.deb
           - config_name:           Linux (headless)
             target_os:             linux
             building_on_os:        ubuntu-18.04
             build_command:         sh linux/autorelease_linux.sh ${{ github.workspace }}
             asset_path:            deploy/Jamulus_headless_amd64.deb
             asset_name:            jamulus_headless_${{ needs.create_release.outputs.version_name }}_ubuntu_amd64.deb
           - config_name:           MacOS
             target_os:             macos
             building_on_os:        macos-10.15
             build_command:         sh mac/autorelease_mac.sh ${{ github.workspace }}
             asset_path:            deploy/Jamulus-installer-mac.dmg
             asset_name:            jamulus_${{ needs.create_release.outputs.version_name }}_mac.dmg
           - config_name:           Windows
             target_os:             windows
             building_on_os:        windows-latest
             build_command:         powershell .\windows\autorelease_windows.ps1 -sourcepath "${{ github.workspace }}"
             asset_path:            deploy\Jamulus-installer-win.exe
             asset_name:            jamulus_${{ needs.create_release.outputs.version_name }}_win.exe
           - config_name:           AndroidAPK
             target_os:             android
             building_on_os:        ubuntu-18.04
             build_command:         ./android/automated_build/ # Uses an action in the directory
             asset_path:            android-build/build/outputs/apk/debug/android-build-debug.apk
             asset_name:            jamulus_${{ needs.create_release.outputs.version_name }}_android.apk
    steps:

      ### Setup ###
    
      # Checkout code
      - name:                       Checkout code
        uses:                       actions/checkout@v2
        with:
          submodules:               true

      ### Build ###

      - name:                       "Build for ${{ matrix.config.config_name }}"
        run:                        ${{ matrix.config.build_command }}

      ### Upload releases ###

      ## Upload assets to the release which is tagged with the tag that triggered this action.
      - name:                       Upload Release Asset - Tag
        id:                         upload-release-asset
        uses:                       actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:               ${{ needs.create_release.outputs.upload_url }} # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path:               ${{ matrix.config.asset_path }}
          asset_name:               ${{ matrix.config.asset_name }}
          asset_content_type:       application/octet-stream
